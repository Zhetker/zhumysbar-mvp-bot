import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")

if not API_TOKEN:
    raise ValueError("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å –µ–≥–æ –≤ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π
KEYWORDS = ["–≤–∞–∫–∞–Ω—Å–∏—è", "–Ω—É–∂–µ–Ω", "—Ç—Ä–µ–±—É–µ—Ç—Å—è", "—Ä–∞–±–æ—Ç–∞", "–≥—Ä—É–∑—á–∏–∫", "—Å–∫–ª–∞–¥", "—Ñ–∞–±—Ä–∏–∫–∞", "—Å—Ç—Ä–æ–π–∫–∞"]

@dp.message_handler(content_types=types.ContentType.TEXT)
async def check_message(message: types.Message):
    text = message.text.lower()

    if any(word in text for word in KEYWORDS):
        await message.reply("‚úÖ –í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è –ø—Ä–∏–Ω—è—Ç–∞. –°–ø–∞—Å–∏–±–æ!")
    else:
        await message.reply(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –ø–æ —à–∞–±–ª–æ–Ω—É:\n\n"
            "üìç –ö—Ç–æ –Ω—É–∂–µ–Ω\nüìÖ –ö–æ–≥–¥–∞\nüïó –í—Ä–µ–º—è\nüí∞ –û–ø–ª–∞—Ç–∞\nüìû –ö–æ–Ω—Ç–∞–∫—Ç"
        )

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
