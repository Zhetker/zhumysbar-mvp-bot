import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from rapidfuzz import fuzz

logging.basicConfig(level=logging.INFO)

API_TOKEN = "6098697507:AAE8dXizz_MviFeRwDnyEEFMNNbS1zgUSgE"
CHANNEL_ID = "@zhumys_bar"  # üîπ –∑–∞–º–µ–Ω–∏ –Ω–∞ username –∏–ª–∏ ID —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏
FIELDS = ["–≥—Ä—É–∑—á–∏–∫", "–Ω—É–∂–µ–Ω", "—Ç—Ä–µ–±—É–µ—Ç—Å—è", "—Ä–∞–±–æ—Ç–∞", "—Å–∫–ª–∞–¥", "—Ñ–∞–±—Ä–∏–∫–∞", "—Å—Ç—Ä–æ–π–∫–∞"]
TEMPLATE_HINT = (
    "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –ø–æ —à–∞–±–ª–æ–Ω—É:\n\n"
    "üìç –ö—Ç–æ –Ω—É–∂–µ–Ω\nüìÖ –ö–æ–≥–¥–∞\nüïó –í—Ä–µ–º—è\nüí∞ –û–ø–ª–∞—Ç–∞\nüìû –ö–æ–Ω—Ç–∞–∫—Ç"
)

def check_vacancy(text: str) -> bool:
    text = text.lower()

    # üîπ 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—Å –æ–ø–µ—á–∞—Ç–∫–∞–º–∏)
    for word in FIELDS:
        if fuzz.partial_ratio(word, text) > 80:
            return True

    # üîπ 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —à–∞–±–ª–æ–Ω
    has_person = any(x in text for x in ["–≥—Ä—É–∑—á–∏–∫", "–≤–æ–¥–∏—Ç–µ–ª—å", "–º–µ–Ω–µ–¥–∂–µ—Ä", "—É–±–æ—Ä—â"])
    has_date = any(x in text for x in ["—Å–µ–≥–æ–¥–Ω—è", "–∑–∞–≤—Ç—Ä–∞", "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—á–∏—Å–ª–∞"])
    has_time = any(char.isdigit() and ":" in text or "—É—Ç—Ä–∞" in text or "–≤–µ—á–µ—Ä–∞" in text for char in text)
    has_money = any(x in text for x in ["—Ç–≥", "‚Ç∏", "—Ç–µ–Ω–≥–µ", "—Å–æ–º", "—Ä—É–±", "‚ÇΩ", "usd", "$"])
    has_contact = any(x in text for x in ["870", "+7", "—Ç–µ–ª", "whatsapp", "–≤–∞—Ç—Å–∞–ø", "tg", "@"])

    checks = [has_person, has_date, has_time, has_money, has_contact]
    return sum(checks) >= 4

@dp.message()
async def process_message(message: types.Message):
    text = message.text or ""
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

    if check_vacancy(text):
        await message.reply("‚úÖ –í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è –ø—Ä–∏–Ω—è—Ç–∞. –°–ø–∞—Å–∏–±–æ!")

        # üîπ –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –≤ –∫–∞–Ω–∞–ª
        try:
            await bot.send_message(CHANNEL_ID, f"üì¢ –ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è:\n\n{text}")
            logging.info("–í–∞–∫–∞–Ω—Å–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –≤ –∫–∞–Ω–∞–ª: {e}")

    else:
        await message.reply(TEMPLATE_HINT)

async def main():
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
